<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on eduardoaleixo</title><link>https://www.eduardoaleixo.com/categories/go/</link><description>Recent content in go on eduardoaleixo</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 24 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.eduardoaleixo.com/categories/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Continuously check code coverage while developing tests in go</title><link>https://www.eduardoaleixo.com/posts/go-tests-and-coverage-continuously/</link><pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.eduardoaleixo.com/posts/go-tests-and-coverage-continuously/</guid><description>I have this workflow where while developing tests I also check for code coverage. The idea is to see if I am really touching that piece of code I am adding tests for. Similar to TDD, there&amp;rsquo;s a certain primal endorphine rush from seeing the coverage go from red to green.
In a nutshell, it works like this:
1 go test ./... -coverprofile=coverage.out &amp;amp;&amp;amp; go tool cover -html=coverage.out The first bit will create a coverage.</description></item><item><title>Run only benchmark in go(lang)</title><link>https://www.eduardoaleixo.com/posts/run-only-benchmark-go/</link><pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.eduardoaleixo.com/posts/run-only-benchmark-go/</guid><description>a quick go(lang) tip
let&amp;rsquo;s say you have tests and benchmarks in your codebase and you want to run only benchmarks, or to put in other words, to filter out all tests from being executed
unfortunately there&amp;rsquo;s no --bench-only nor anything similar available, but there&amp;rsquo;s a trick popular in the community that does the job
the idea is to basically filter out all tests with an unlikely regex
1 2 3 4 go test .</description></item></channel></rss>