<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>technical on eduardoaleixo</title><link>https://www.eduardoaleixo.com/categories/technical/</link><description>Recent content in technical on eduardoaleixo</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 05 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.eduardoaleixo.com/categories/technical/index.xml" rel="self" type="application/rss+xml"/><item><title>Export Firefox Synced Tabs</title><link>https://www.eduardoaleixo.com/posts/2022/export-firefox-synced-tabs/</link><pubDate>Sun, 05 Jun 2022 00:00:00 +0000</pubDate><guid>https://www.eduardoaleixo.com/posts/2022/export-firefox-synced-tabs/</guid><description>I tend to have many tabs open. Like way too many. I first noticed this behaviour when the tabs counter in my browser became a smile.
But that is fine, everybody knows someone like that, hell, you may even be that person.
What I am here to talk about is a healthy routine I&amp;rsquo;ve developed: from time to time (ideally once a month), close all tabs. But hey, firefox has a feature that allos closing old tabs automatically, somebody may say.</description></item><item><title>downloading subtitles from youtube to help studying japanese</title><link>https://www.eduardoaleixo.com/posts/2022/downloading-subtitles-from-youtube/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.eduardoaleixo.com/posts/2022/downloading-subtitles-from-youtube/</guid><description>intro As you may know, I&amp;rsquo;ve been studying Japanese for a while. It&amp;rsquo;s a super difficult language for us European language speakers. There&amp;rsquo;s the alphabets (3!) to learn, the grammar, vocabulary etc.
Right now I am at a point where I don&amp;rsquo;t have to look up every single vocabulary and have some basic grasp of grammar. I haven&amp;rsquo;t taken the official test but I am pretty sure I can pass the JLPT N5 test.</description></item><item><title>picture-in-picture in i3</title><link>https://www.eduardoaleixo.com/posts/2022/picture-in-picture-i3/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.eduardoaleixo.com/posts/2022/picture-in-picture-i3/</guid><description>intro Sometimes I want to make an arbitrary window to be &amp;ldquo;picture-in-picture&amp;rdquo;, ie for that window to be above all others, without affecting their layout.
And most importantly, I also want that behaviour to be consistent across workspaces.
A prime example of that is zoom calls, where I may jump between workspaces while we are talking about different subjects.
meat Luckily i3 supports that well quite easily by using sticky floating windows.</description></item><item><title>Vimwiki/Taskwiki diary template</title><link>https://www.eduardoaleixo.com/posts/2022/vimwiki-diary-template/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.eduardoaleixo.com/posts/2022/vimwiki-diary-template/</guid><description>I&amp;rsquo;ve been using a vim + vimwiki + taskwiki + taskwarrior + timewarrior setup for a while. It works really well!
(One day I will try org-mode. Not today though)
One of the bits that got a good impression is the diary template. Basically it contains:
A header The list of tasks that haven&amp;rsquo;t been completed The list of tasks completed on that day 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!</description></item><item><title>Setting up evdi after updating kernel to 5.15.12</title><link>https://www.eduardoaleixo.com/posts/2022/setting-up-evdi-after-updating-kernel-to-5-15-12/</link><pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.eduardoaleixo.com/posts/2022/setting-up-evdi-after-updating-kernel-to-5-15-12/</guid><description>intro as you may know, I use an old ipad as a second screen. in a nutshell, it relies on the evdi kernel module to create a virtual display which is then accessed by the ipad via a VNC Viewer.
pne quirk is that almost every time I update the kernel, evdi (and consequently my ipad setup) also breaks. I am not super familiar with kernel shenanigans so I don&amp;rsquo;t know if it&amp;rsquo;s a fundamental issue or not.</description></item><item><title>Continuously check code coverage while developing tests in go</title><link>https://www.eduardoaleixo.com/posts/go-tests-and-coverage-continuously/</link><pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.eduardoaleixo.com/posts/go-tests-and-coverage-continuously/</guid><description>I have this workflow where while developing tests I also check for code coverage. The idea is to see if I am really touching that piece of code I am adding tests for. Similar to TDD, there&amp;rsquo;s a certain primal endorphine rush from seeing the coverage go from red to green.
In a nutshell, it works like this:
1 go test ./... -coverprofile=coverage.out &amp;amp;&amp;amp; go tool cover -html=coverage.out The first bit will create a coverage.</description></item><item><title>Find large files with GNU find</title><link>https://www.eduardoaleixo.com/posts/find-large-files-with-gnu-find/</link><pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.eduardoaleixo.com/posts/find-large-files-with-gnu-find/</guid><description>I edit my podcast using Audacity, which creates big (&amp;gt;1GB) project files (.aup3). In an ideal world, I would keep these project files, for a nice remaster when I get better at editing. In the real world, however, these files occupy space. I can technically backup them. But contrary to what people say, for the end user, storage is still expensive. I don&amp;rsquo;t have the calculations in my hand right now, but it&amp;rsquo;s either store in the cloud ($$$ expensive) or manage your backups at time (time expensive).</description></item><item><title>Run only benchmark in go(lang)</title><link>https://www.eduardoaleixo.com/posts/run-only-benchmark-go/</link><pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.eduardoaleixo.com/posts/run-only-benchmark-go/</guid><description>a quick go(lang) tip
let&amp;rsquo;s say you have tests and benchmarks in your codebase and you want to run only benchmarks, or to put in other words, to filter out all tests from being executed
unfortunately there&amp;rsquo;s no --bench-only nor anything similar available, but there&amp;rsquo;s a trick popular in the community that does the job
the idea is to basically filter out all tests with an unlikely regex
1 2 3 4 go test .</description></item><item><title>ORing label selectors with kubectl</title><link>https://www.eduardoaleixo.com/posts/oring-label-selectors-with-kubectl/</link><pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate><guid>https://www.eduardoaleixo.com/posts/oring-label-selectors-with-kubectl/</guid><description>Let&amp;rsquo;s say you want, using the kubectl, to get all pods with label tier=backend OR tier=frontend.
Did you know you could do the following?
1 kubectl get pods -l &amp;#39;tier in (backend, frontend)&amp;#39; We at $WORK did not.
It&amp;rsquo;s actually even more powerful, you can use notin, you can combine with , to perform AND. I recommend reading the docs for more examples.
Also, if you are at the exploration phase, don&amp;rsquo;t forget to pass --show-labels to have a understanding of the existing labels.</description></item><item><title>my setup: ipad as a second monitor for quick note taking</title><link>https://www.eduardoaleixo.com/posts/ipad-second-monitor-note-taking/</link><pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate><guid>https://www.eduardoaleixo.com/posts/ipad-second-monitor-note-taking/</guid><description>the situation i have an old Ipad 2 (2011 model), stuck at 9.3.5 version. its screen is kinda broken, but still usable. almost no apps can be installed. it&amp;rsquo;s slow. my window manager is i3. i also started using vimwiki for note taking. i set it up as a scratchpad* to be able to take notes quickly. * in i3, a scratchpad it&amp;rsquo;s simply a window that does not abide to the tiling rules.</description></item><item><title>Mocking endpoints granularly in Angular</title><link>https://www.eduardoaleixo.com/posts/angular-mock-endpoint/</link><pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate><guid>https://www.eduardoaleixo.com/posts/angular-mock-endpoint/</guid><description>Introduction At $WORK the frontend team usually develops against the real backend (exposed internally), since running the backend locally involves some additional setup (and resources, such as RAM).
The normal flows goes as follows:
Backend developers start implementing the feature Frontend devs start working on the feature only after the backend is finished Which works fine most of the time. However, sometimes a feature is being developed in parallel, so the frontend crew doesn&amp;rsquo;t have an API to code against!</description></item><item><title>Unnoficial Bash Strict Mode</title><link>https://www.eduardoaleixo.com/posts/bash-strict-mode/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><guid>https://www.eduardoaleixo.com/posts/bash-strict-mode/</guid><description>Bash (and shell scripting in general) is NOT straightforward. It&amp;rsquo;s easy to mess up if you don&amp;rsquo;t know what you are doing. If you come from a traditional programming background and just want to plumb a few lines of code, there are a few behaviours that will confuse the hell out of you.
To help with that, the unnoficial bash strict mode was created. In this post, we will go over misleading behaviors and how the strict mode can be helpful in each case (quirks included).</description></item></channel></rss>